## RULES ##

1. Uso de commits atômicos;
2. Cada linha da mensagem do seu commit terá no máximo 100 caracteres;
3. A compreensão do conteúdo da tarefa deve ser quase que automática para qualquer contribuidor e de fácil compreensão para novos contribuidores;
4. Os tipos, escopos, descrições, conteúdo do corpo e rodapé devem ser devidamente declarados.

__Escreva sua mensagem de commit desta forma:__

<pre>
[Só use TAG em casos específicos] Resuma claramente o commit em uma linha e em até 72 caracteres

Descreva o problema que o commit resolve ou o caso de uso que levou a 
nova funcionalidade. Justifique porque você escolheu essa solução.
Não descreva o código. Descreva o propósito e a abordagem utilizada.
</pre>
Nossas tarefas agora serão divididas em átomos, unidades bem simples que implementam uma única funcionalidade (uma micro-tarefa) 
ou corrigem um erro específico. E nossos commits são uma instância dessas tarefas, uma representação simplificada do que aquela tarefa representa. 

        Definições dessa padronização.
        <tipo>[escopo opcional]: <descrição>
        <corpo opcional>
        <rodapé opcional>

            Os Tipos se resumem em:

            __feat:__   são quaisquer adições ao código. Enquanto elas podem alterar parte do código já existente, o foco dela é a implementação de features novas
                    ao ecossistema.
            __fix:__    refere-se às correções de bugs. Caso o time trabalhe com issues, é possível com smart commits associar seu commit a uma issue e alterar
                    seu estado com keywords como resolve, fix, solves. Em geral, essas marcações devem vir na descrição ou no footer.
            __style:__  Alterações referentes a formatações de código, semicolons, trailing spaces e lint.
            __refactor:__ refere-se a quaisquer mudanças que atinjam o código, porém não alterem sua funcionalidade. 
                    Alterou o formato de como é processamento em determinada parte da sua tela, mas manteve a mesma funcionalidade? Declare como refactor.
            __test:__   adicionando testes ausentes ou corrigindo testes existentes
            __build:__ Mudança que afeta o sistema de construção ou dependências externas
            __ci:__ Alterações na estrutura fundamental de arquivos e scripts de configuração de CI
            __choren:__ outras alterações que não modificam arquivos scr ou de teste

        Escopos podem ser quaisquer partes do projeto; é importante que eles sejam compreendidos de uma maneira quase automática para alguém que
        não conhece o projeto. Em geral, a utilização do escopo é bem genérica, especificando apenas o primeiro contexto (login, middleware, profile).
        No entanto, prefiro ser mais específico e definir um segundo escopo (containers/login, por exemplo). Supondo que você tenha feito uma 
        refatoração nas rotas relativas as settings do seu projeto, uma possibilidade de commit seria:
        " feat(routes/settings): ajuste as configurações a serem chamadas na tela x "

        As descrições devem ser suficientemente claras, utilizando seu espaço até o máximo permitido da linha. 
        Caso você veja que a explicação não foi suficiente, sinta-se à vontade para adicionar conteúdo ao corpo.

        O corpo, por sua vez, vai conter descrições mais precisas do que está contido naquele commit, mostrando as razões ou consequências geradas 
        por esse código, assim como instruções futuras.

        O rodapé restringe-se às alterações de estado via smart commit, como resoluções de estado de issues, e.g. ‘resolves issue #312’.



__Exemplos de commits__

    __style__

    style: Adicione configurações recomendadas de inicialização e tarefa do VSCode (# 33544)

    Isso adiciona configurações comuns usadas ao desenvolver código no VSCode.
    Especificamente, ele adiciona suporte para o lançamento desses destinos como tarefas e
    depurador ind.

    - `packages/core/test`
    - `packages/core/test/render3`
    - `packages/core/test/acceptance`

    PR Close #33544

    __refactor__
    
    refactor(ivy): mova todas as configurações de estilo para `TNodeFlags` (# 33540)

    Este patch elimina as definições de configuração presentes no
    Matriz `TStylingContext` usada no algoritmo de estilo
    para as ligações `[style]`, `[style.prop]`, `[class]` e `[class.name]`.
    Todas essas configurações agora vivem dentro do `TNodeFlags`.

    __feat__

    feat(common):suporte ao carregamento de localidades de um global (# 33523)

    Para oferecer suporte à localização do tempo de compilação, precisamos estar
    capaz de fornecer os locais por meio de uma propriedade global bem conhecida.

    Esta confirmação altera `getLocaleData ()` para que tente
    para ler o local no `ng.common.locales` global se o
    locale ainda não foi registrado via `registerLocaleData ()`.

    Fechar PR # 33523




